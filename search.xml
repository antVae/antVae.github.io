<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>学习TypeScript对象类型(三)</title>
      <link href="/2024/03/01/%E5%AD%A6%E4%B9%A0TypeScript%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B(%E4%B8%89)/"/>
      <url>/2024/03/01/%E5%AD%A6%E4%B9%A0TypeScript%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<h3 id="对象的类型"><a href="#对象的类型" class="headerlink" title="对象的类型"></a>对象的类型</h3><p>在<font color=#0000FF>TypeScript</font>中，我们定义对象的方式是使用关键字 <code>interface</code> (接口)，我理解为是使用 <code>interface</code> 来定义一种约束，让数据的结构满足约束的格式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样写会报错，因为我们在Person中定义了name和sex属性，但p中缺少了sex属性</span></span><br><span class="line"><span class="comment">// 使用接口约束的时候不能多一个属性，也不能少一个属性，必须与接口保持一致</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;antVae&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同名"><a href="#同名" class="headerlink" title="同名"></a>同名</h3><p>同名<code> interface</code> 对象类型会进行合并</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: A = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;antVae&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>定义某个对象类型时可以继承其他定义对象类型的属性，使用 <code>extends</code> 关键字</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A &#123; </span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: B = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;antVae&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>定义一个对象类型时，被该对象类型约束的对象必须拥有该对象类型的所有属性，想要某个属性非必须时，可以使用 <code>?</code> 操作符修饰</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可选属性的含义表示该属性可以不存在</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    sex?: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;antVae&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意属性"><a href="#任意属性" class="headerlink" title="任意属性"></a>任意属性</h3><p>允许在对象中添加新的任意属性， 写法<code>[propName: string]：any</code>。<br><font color=#FF0000>需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</font></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义了[propName: string]: any，允许添加新的任意属性，不会报错</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span>,</span><br><span class="line">    [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;antVae&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><p>关键字 <code>readonly</code>， 是不允许被赋值的，只能读取</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    name?: <span class="built_in">string</span>,</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">hobby</span>: <span class="built_in">string</span>,</span><br><span class="line">    [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">hobby</span>: <span class="string">&#x27;爬山&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只读属性不允许修改，会报错</span></span><br><span class="line">p.<span class="property">hobby</span> = <span class="string">&#x27;唱歌&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="添加函数"><a href="#添加函数" class="headerlink" title="添加函数"></a>添加函数</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line">    sex?: <span class="built_in">string</span>,</span><br><span class="line">    [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">    <span class="attr">hobby</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;antVae&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">hobby</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;爬山&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习TypeScript任意类型(二)</title>
      <link href="/2024/03/01/%E5%AD%A6%E4%B9%A0TypeScript%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B(%E4%BA%8C)/"/>
      <url>/2024/03/01/%E5%AD%A6%E4%B9%A0TypeScript%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<h3 id="node环境执行ts文件"><a href="#node环境执行ts文件" class="headerlink" title="node环境执行ts文件"></a>node环境执行ts文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install @types/node --save-dev (node环境支持的依赖必装)</span><br><span class="line">npm install ts-node -g</span><br></pre></td></tr></table></figure><ul><li><p>什么是 <code>@types/node</code><br><code>@types/node</code> 是 <font color=#0000ff>TypeScript</font> 的一个声明文件包，用于描述 <code>Node.js</code> 核心模块和常用的第三方库的类型信息。这些声明文件增加了对 <font color=#0000ff>TypeScript</font> 在 <code>Node.js</code> 环境下的支持，并提供了更好的类型安全和编辑器智能提醒。</p></li><li><p>什么是 <code>ts-node</code><br><code>ts-node</code>是基于tsc编译器的一款运行时 <font color=#0000ff>TypeScript</font> 编译器，它允许 <font color=#0000ff>TypeScript</font> 代码在运行时通过<code>Node.js</code>环境直接执行。这意味着，无需先构建应用程序，因此可以快速进行开发和测试，大大提高了开发效率。<br>与tsc不同，<code>ts-node</code>可以立即编译 <font color=#0000ff>TypeScript</font> 代码并直接在<code>Node.js</code>环境中运行，而无需经过构建或打包等步骤。这个特性使得我们在开发过程中，可以更加灵活方便的使用 <font color=#0000ff>TypeScript</font> 进行快速迭代。</p></li></ul><h3 id="Any类型"><a href="#Any类型" class="headerlink" title="Any类型"></a>Any类型</h3><p><code>Any</code> 类型表示一个可以接受任何类型的变量，当一个变量的类型标记为 <code>any</code> 类型时，它可以被赋值为任何类型的值，声明变量时没有指定任意类型默认为 <code>any</code> 类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">any</span> = <span class="string">&#x27;antVae&#x27;</span></span><br><span class="line">name = <span class="literal">true</span></span><br><span class="line">name = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name  <span class="comment">// 没声明类型默认为any类型</span></span><br><span class="line">name = <span class="string">&#x27;antVae&#x27;</span></span><br><span class="line">name = <span class="number">18</span></span><br></pre></td></tr></table></figure><p><font color=#ff0000>弊端：</font> 如果使用 <code>any</code> 就失去了TS类型检测的作用，不要让 <code>TypeScript</code> 变成 <code>AnyScript</code></p><h3 id="unknown类型"><a href="#unknown类型" class="headerlink" title="unknown类型"></a>unknown类型</h3><p><code>TypeScript3.0</code>中引入了 <code>unknown</code> 类型，与 <code>any</code> 类型一样，所有类型都可以分配给 <code>unknown</code>，但它更安全，<code>unknown</code> 类型比 <code>any</code> 类型更加严格</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span></span><br><span class="line">value = <span class="literal">true</span>            <span class="comment">// ok</span></span><br><span class="line">value = <span class="number">18</span>              <span class="comment">// ok</span></span><br><span class="line">value = <span class="string">&#x27;antVae&#x27;</span>        <span class="comment">// ok</span></span><br><span class="line">value = []              <span class="comment">// ok</span></span><br><span class="line">value = &#123;&#125;              <span class="comment">// ok</span></span><br><span class="line">value = <span class="literal">null</span>            <span class="comment">// ok</span></span><br><span class="line">value = <span class="literal">undefined</span>       <span class="comment">// ok</span></span><br><span class="line">value = <span class="title class_">Symbol</span>(<span class="string">&#x27;val&#x27;</span>)   <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样写会报错，unknown 类型不能作为子类型只能作为父类型，any 类型可以作为子类型也可以作为父类型</span></span><br><span class="line"><span class="comment">// unknown 类型不能赋值给其他类型，但可以赋值给 any 类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span> = <span class="string">&#x27;antVae&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value2</span>: <span class="built_in">string</span> = value</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样写就没问题</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span> = <span class="string">&#x27;antVae&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value2</span>: <span class="built_in">string</span> = value</span><br><span class="line"></span><br><span class="line"><span class="comment">// unknown类型可赋值对象只有 unknown 和 any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span> = <span class="string">&#x27;antVae&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value2</span>: <span class="built_in">unknown</span> = value</span><br><span class="line"><span class="keyword">let</span> <span class="attr">value3</span>: <span class="built_in">any</span> = value</span><br></pre></td></tr></table></figure><h3 id="any-和-unknown-区别"><a href="#any-和-unknown-区别" class="headerlink" title="any 和 unknown 区别"></a>any 和 unknown 区别</h3><p>对象被定义为<code>any</code>类型时，不管访问的属性存不存在，都不会报错，但定义为<code>unknown</code>类型时，是不能调用对象的属性和方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">any</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;antVae&#x27;</span>,</span><br><span class="line">    <span class="attr">hobby</span>: (): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;爬山&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hobby</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">unknown</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;antVae&#x27;</span>,</span><br><span class="line">    <span class="attr">hobby</span>: (): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;爬山&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">hobby</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sex</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习TypeScript基础类型(一)</title>
      <link href="/2024/02/29/%E5%AD%A6%E4%B9%A0TypeScript%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B(%E4%B8%80)/"/>
      <url>/2024/02/29/%E5%AD%A6%E4%B9%A0TypeScript%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><font color=#0000FF>TypeScript</font>是<font color=#0000FF>JavaScript</font>的超集，所有JS的基础类型TS也都包含在里面</p><p>基础类型包括 <font color=#0000FF>Number</font>，<font color=#0000FF>String</font>，<font color=#0000FF>Boolean</font>，<font color=#0000FF>null</font>，<font color=#0000FF>undefined</font> 以及ES6的 <a href="https://www.w3cschool.cn/escript6/escript6-keim37f3.html">Symbol</a> 和 ES10的 <a href="https://www.w3cschool.cn/qoyhx/qoyhx-s8dg3q6u.html">BigInt</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装依赖,并初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br><span class="line">tsc --init</span><br></pre></td></tr></table></figure><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><ul><li><font color=#0000FF>Number</font>(数值类型)<br>数值类型用 <code>number</code> 定义，支持十六进制，十进制，八进制和二进制</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">noNum</span>: <span class="built_in">number</span> = <span class="title class_">NaN</span>; <span class="comment">// NaN也是数值类型的一类值，表示未定义或者不可表示的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">147</span>; <span class="comment">// 普通数字</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">infinityNum</span>: <span class="built_in">number</span> = <span class="title class_">Infinity</span>;  <span class="comment">// 无穷大</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">8</span>; <span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span>; <span class="comment">// 十六进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>; <span class="comment">// 二进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: <span class="built_in">number</span> = <span class="number">0o744</span>; <span class="comment">// 八进制</span></span><br></pre></td></tr></table></figure><ul><li><font color=#0000FF>String</font>(字符串类型)<br>字符串类型用 <code>string</code> 定义，支持模板字符串</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;antVae&#x27;</span> <span class="comment">// 普通声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">hobby</span>: <span class="built_in">string</span> = <span class="string">`<span class="subst">$&#123;name&#125;</span>喜欢爬山`</span> <span class="comment">// 模板字符串声明</span></span><br></pre></td></tr></table></figure><ul><li><font color=#0000FF>Boolean</font>(布尔类型)<br>布尔类型用 <code>boolean</code> 定义，<font color=#FF0000>使用构造函数Boolean创建的对象不是布尔值</font></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">createBoolean</span>: <span class="built_in">boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>) <span class="comment">// 会报错，返回一个Boolean对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">createBoolean</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>) <span class="comment">// 正确, Boolean是js内置的一个对象，ts中已经定义好了，可以直接当类型定义</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">booleand</span>: <span class="built_in">boolean</span> = <span class="literal">true</span> <span class="comment">// 可以直接使用布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">booleand</span>: <span class="built_in">boolean</span> = <span class="title class_">Boolean</span>(<span class="number">1</span>) <span class="comment">// 也可以通过函数返回布尔值</span></span><br></pre></td></tr></table></figure><ul><li><font color=#0000FF>Void</font>(空值类型)</li></ul><p>空值类型用 <code>void</code> 定义，在<font color=#0000FF>JavaScript</font>中没有<code>void</code>的概念，在<font color=#0000FF>TypeScript</font>中可以用 <code>void</code> 表示没有任何返回值的函数。<code>void</code> 类型的用法，主要用在我们不希望调用者关心函数返回值的情况下，比如通常的异步回调函数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">voidFn</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;void test&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void</code> 也可以定义 <code>undefined</code> 和 <code>null</code> 类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="built_in">void</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><ul><li><p><font color=#0000FF>null</font> 和 <font color=#0000FF>undefined </font>类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>; <span class="comment">// 定义undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>; <span class="comment">// 定义null</span></span><br></pre></td></tr></table></figure></li><li><p><font color=#FF0000>void、undefined、null 的区别</font><br><code>undefined</code> 和 <code>null</code> 是所有类型的子类型，也就是说 <code>undefined</code> 类型的变量可以赋值给 <code>string</code> 类型的变量</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&#x27;vae&#x27;</span></span><br><span class="line"></span><br><span class="line">str = test <span class="comment">// 这样写不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&#x27;vae&#x27;</span></span><br><span class="line"></span><br><span class="line">str = test <span class="comment">// 这样写不会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="built_in">void</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&#x27;vae&#x27;</span></span><br><span class="line"></span><br><span class="line">str = test <span class="comment">// 这样写会报错, void类型不可以分给其他类型</span></span><br></pre></td></tr></table></figure><ul><li><font color=#FF0000>Tips 注意</font><br>如果你配置了tsconfig.json开启了严格模式， <code>null</code> 类型不能赋值给 <code>void</code> 类型，但<code>undefined</code> 类型可以</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="built_in">void</span> = <span class="literal">null</span>; <span class="comment">// 会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>; <span class="comment">// 不会报错</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
